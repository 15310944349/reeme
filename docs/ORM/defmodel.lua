--@type:doc
--name ORM.defmodel
--title 定义模型

--segment 定义模型在上一篇《ORM总述》中已经提到了，这是一切使用的基础，并且给出了一个基本的例子。本篇将详细描述定义模型中的代码。

--segment <strong>fields子table：</strong>
--segment fields子table用于描述模型中的所有字段，他对应着数据库表中的字段，其名称应当于数据库表中的列名完全相同，且模型定义代码的文件名，也必须与数据库表的名字完全相同。所以在这里插一句，<strong>严重推荐使用标准变量命名法来命名
---数据库的表和列名，并且尊重大小写敏感</strong>。虽然Mysql对于列名的大小写是不敏感的，而且表名和列名甚至都可以用数字等符号开头。但是不推荐这样做，因为他会让ORM的使用变得更麻烦，而使用标准变量名命名。一切就变得轻松的。回到fields
---子table上来，在这里面又是一个一个的键值对，每一对的键名就是列名（如果列名不标准，那么定义的时候就要写成['keyname'] = XXXX），而其值都是一个字符串，并且是按照下面的标准来组成的：
--list 如果这一列拥有auto increasement自增长属性，那么写一个*号
--list 如果这一列是可以为NULL，那么写一个#符号
--list 如果这一列是字符串类型的，那么写一个字母s，注意要小写
--list 如果这一列是浮点数类型的，那么写一个小写的字母n
--list 如果这一列是数值类型的，那么写一个小写的字母i
--list 如果这一列是布尔类型的，那么写一个小写的字母b
--list 接下来是这一列的数据的长度，如int(10)，那么就写成i(10)，括号中的数字就是字段允许的长度
--list 最后是默认值，如果右括号之后没有内容了，则会被认为该字段不具有默认值，否则请将默认值写在右括号后面

--segment 根据以上规则就形成了这个字符串，如下面的例子都是正确的：
--list *i(10)
--list #s(200)''
--list s(1000)'none'
--list i(1)0

--segment 定义完了fields子table之后，还需要再定义一个indices子table，其功能是说明哪些字段是什么类型的索引。这个字段首先必须是在上面的fields子table中出现了的字段，其次索引类型的值只有以下3种：
--list primary:主键
--list unique:唯一索引
--list index:索引

--segment 定义indices子table可以让ORM在工作过程中知道哪些字段可以用于索引，于是可以用于限制记录更新、删除时不会导致出现错误的操作（如不带限制语句时一次性将整个表都更新成了相同的值）

--segment 模型的定义就这样完成了，最后再让我们来温习一下一段简单完整的模型定义的代码（后面的中文是注释）：
--[[
return {
	fields = {
		id = '*i(8)',			--自增型，类型为integer，长度为8，无默认值
		a = 'i(8)0',			--类型为integer，长度为8，默认值为0
		b = "#s(20)''",			--类型为string，可以为NULL，默认值为''
		d = 'i(1)0',			--类型为integer，长度为1，默认值为0
		f = "s(65536)''"		--类型为string，不可以为NULL，长度为65536，默认值为''
	},
	indices = {
		id = 'primary',			--id字段是主键
	}
}
--]]